name: Build packages in the repository

on:
  workflow_dispatch:
    inputs:
      runs-on:
        required: true
        type: choice
        options:
          - ubuntu-24.04
          - ubuntu-24.04-arm
        description: The runner to build packages
  
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
        description: The runner to build packages

jobs:
  independent-packages:
    strategy:
      matrix:
        pkgbuild-repo:
          - git+https://aur.archlinux.org/ares-decrypt.git
          - git+https://aur.archlinux.org/aria2cd.git
          - git+https://aur.archlinux.org/ariang-git.git
          - git+https://aur.archlinux.org/ariang-native-git.git
          - git+https://aur.archlinux.org/basedpyright.git
          - git+https://aur.archlinux.org/bcache-tools.git
          - git+https://aur.archlinux.org/binder_linux-dkms.git
          - git+https://aur.archlinux.org/btrfs-assistant.git
          - git+https://aur.archlinux.org/btrfsmaintenance.git
          - git+https://aur.archlinux.org/caddy-trojan.git
          - git+https://aur.archlinux.org/carapace.git
          - git+https://aur.archlinux.org/cgtproxy.git
          - git+https://aur.archlinux.org/chromium-extension-plasma-integration.git
          - git+https://aur.archlinux.org/chromium-extension-web-store.git
          - git+https://aur.archlinux.org/cleanmedia.git
          - git+https://aur.archlinux.org/cloudflarespeedtest.git
          - git+https://aur.archlinux.org/crow-translate.git
          - git+https://aur.archlinux.org/csharp-ls.git
          - git+https://aur.archlinux.org/dendrite.git
          - git+https://aur.archlinux.org/dockerfile-language-server.git
          - git+https://aur.archlinux.org/downgrade.git
          - git+https://aur.archlinux.org/fcitx5-pinyin-custom-pinyin-dictionary.git
          - git+https://aur.archlinux.org/fcitx5-pinyin-moegirl.git
          - git+https://aur.archlinux.org/ffmpeg-audio-thumbnailer.git
          - git+https://aur.archlinux.org/find-the-command.git
          - git+https://aur.archlinux.org/firefox-extension-adguard.git
          - git+https://aur.archlinux.org/firefox-extension-localcdn.git
          - git+https://aur.archlinux.org/gpt4all-chat.git
          - git+https://aur.archlinux.org/hath-rust.git
          - git+https://aur.archlinux.org/icalingua++-git.git
          - git+https://aur.archlinux.org/icecream.git
          - git+https://aur.archlinux.org/kde-thumbnailer-apk.git
          - git+https://aur.archlinux.org/ksmbd-tools.git
          - git+https://aur.archlinux.org/lyrica.git
          - git+https://aur.archlinux.org/mpv-memo-git.git
          - git+https://aur.archlinux.org/mpv-thumbfast-noenabled-git.git
          - git+https://aur.archlinux.org/mpv-uosc.git
          - git+https://aur.archlinux.org/naiveproxy.git
          - git+https://aur.archlinux.org/needrestart.git
          - git+https://aur.archlinux.org/netcoredbg.git
          - git+https://aur.archlinux.org/nodejs-jsonlint.git
          - git+https://aur.archlinux.org/ntfysh.git
          - git+https://aur.archlinux.org/obs-pipewire-audio-capture.git
          - git+https://aur.archlinux.org/oh-my-posh.git
          - git+https://aur.archlinux.org/openwrt-devel.git
          - git+https://aur.archlinux.org/osc.git
          - git+https://aur.archlinux.org/paccache-hook.git
          - git+https://aur.archlinux.org/paru.git
          - git+https://aur.archlinux.org/pay-respects.git
          - git+https://aur.archlinux.org/phonon-mpv.git
          - git+https://aur.archlinux.org/pipewire-module-xrdp.git
          - git+https://aur.archlinux.org/pipewire-module-xrdp-git.git
          - git+https://aur.archlinux.org/plasma-gamemode-git.git
          - git+https://aur.archlinux.org/plasma6-applets-caraoke-git.git
          - git+https://aur.archlinux.org/plasma6-wallpapers-wallpaper-engine-git.git
          - git+https://aur.archlinux.org/python-pyclip.git
          - git+https://aur.archlinux.org/q4wine.git
          - git+https://aur.archlinux.org/rclone-aliyundrive-git.git
          - git+https://aur.archlinux.org/realitlscanner.git
          - git+https://aur.archlinux.org/ruffle-nightly.git
          - git+https://aur.archlinux.org/sing-box.git
          - git+https://aur.archlinux.org/sing-geoip.git
          - git+https://aur.archlinux.org/sing-geosite.git
          - git+https://aur.archlinux.org/spicetify-extensions-rxri-git.git
          - git+https://aur.archlinux.org/systemd-boot-pacman-hook.git
          - git+https://aur.archlinux.org/systemd-cron.git
          - git+https://aur.archlinux.org/tcp-brutal-dkms.git
          - git+https://aur.archlinux.org/unblockneteasemusic-golang-git.git
          - git+https://aur.archlinux.org/usbguard-notifier-git.git
          - git+https://aur.archlinux.org/vnt.git
          - git+https://aur.archlinux.org/watt-toolkit-bin.git
          - git+https://aur.archlinux.org/waylyrics.git
          - git+https://aur.archlinux.org/xdg-ninja.git
          - git+https://aur.archlinux.org/linux-pf.git
          - git+https://aur.archlinux.org/ayugram-desktop.git
          - git+https://aur.archlinux.org/thrive.git
    runs-on: ${{ inputs.runs-on }}
    name: Build packages without any customization
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: ${{ matrix.pkgbuild-repo }}
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  cinny:
    runs-on: ${{ inputs.runs-on }}
    name: Build cinny with customized cinnyBase env
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/cinny.git
          env: |
            cinnyBase=/cinny
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  spotube:
    runs-on: ${{ inputs.runs-on }}
    name: Build spotube with customized env
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/spotube.git
          env: |
            MAKEPKG_SPOTUBE_SPOTIFY_SECRETS=${{ secrets.MAKEPKG_SPOTUBE_SPOTIFY_SECRETS }}
            MAKEPKG_SPOTUBE_LASTFM_API_KEY=${{ secrets.MAKEPKG_SPOTUBE_LASTFM_API_KEY }}
            MAKEPKG_SPOTUBE_LASTFM_API_SECRET=${{ secrets.MAKEPKG_SPOTUBE_LASTFM_API_SECRET }}
            PACKAGER=${{ vars.PACKAGER }}     

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  libvgm-git:
    runs-on: ${{ inputs.runs-on }}
    name: Build libvgm for packages depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libvgm-git.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  fooyin:
    needs:
      - libvgm-git
    runs-on: ${{ inputs.runs-on }}
    name: Build fooyin which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libvgm
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.libvgm-git.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/fooyin.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  osu-mime:
    runs-on: ${{ inputs.runs-on }}
    name: Build osu-mime for packages depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build packages
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/osu-mime.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  osu-lazer-bin:
    needs:
      - osu-mime
    runs-on: ${{ inputs.runs-on }}
    name: Build osu-lazer-bin which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get osu-mime
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.osu-mime.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/osu-lazer-bin.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  spicetify-cli:
    runs-on: ${{ inputs.runs-on }}
    name: Build spicetify-cli for packages depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/spicetify-cli.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  spicetify-themes:
    needs:
      - spicetify-cli
    strategy:
      matrix:
        pkgbuild-repo:
          - git+https://aur.archlinux.org/spicetify-theme-nord-git.git
          - git+https://aur.archlinux.org/spicetify-themes-git.git
    runs-on: ${{ inputs.runs-on }}
    name: Build spicetify themes
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get spicetify-cli
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.spicetify-cli.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: ${{ matrix.pkgbuild-repo }}
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest
  
  dotnet-install:
    runs-on: ${{ inputs.runs-on }}
    name: Build dotnet-install for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/dotnet-install.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  watt-toolkit-git:
    needs:
      - dotnet-install
    runs-on: ${{ inputs.runs-on }}
    name: Build watt-toolkit-git which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get dotnet-install
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.dotnet-install.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/watt-toolkit-git.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  libglibutil:
    runs-on: ${{ inputs.runs-on }}
    name: Build libglibutil for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libglibutil.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifacts
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  libgbinder:
    needs:
      - libglibutil
    runs-on: ${{ inputs.runs-on }}
    name: Build libgbinder which has aur depends for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libglibutil
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.libglibutil.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libgbinder.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  python-gbinder:
    needs:
      - libglibutil
      - libgbinder
    runs-on: ${{ inputs.runs-on }}
    name: Build python-gbinder which has aur depends for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libglibutil
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.libglibutil.outputs.artifact-name }}

      - name: Get libgbinder
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.libgbinder.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/python-gbinder.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  waydroid:
    needs:
      - libglibutil
      - libgbinder
      - python-gbinder
    runs-on: ${{ inputs.runs-on }}
    name: Build waydroid which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libglibutil
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.libglibutil.outputs.artifact-name }}

      - name: Get libgbinder
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.libgbinder.outputs.artifact-name }}

      - name: Get python-gbinder
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.python-gbinder.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/waydroid.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  libbase58:
    runs-on: ${{ inputs.runs-on }}
    name: Build libbase58 for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libbase58.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  libblkmaker:
    needs:
      - libbase58
    runs-on: ${{ inputs.runs-on }}
    name: Build libblkmaker which has aur depends for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libbase58
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.libbase58.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libblkmaker.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  bfgminer-git:
    needs:
      - libbase58
      - libblkmaker
    runs-on: ${{ inputs.runs-on }}
    name: Build bfgminer-git which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libbase58
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.libbase58.outputs.artifact-name }}

      - name: Get libblkmaker
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.libblkmaker.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/bfgminer-git.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  gorice:
    runs-on: ${{ inputs.runs-on }}
    name: Build go.rice for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/go.rice.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  protoc-gen-go:
    runs-on: ${{ inputs.runs-on }}
    name: Build protoc-gen-go for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/protoc-gen-go.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  protoc-gen-go-grpc:
    needs:
      - protoc-gen-go
    runs-on: ${{ inputs.runs-on }}
    name: Build protoc-gen-go-grpc with aur depends for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get protoc-gen-go
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.protoc-gen-go.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/protoc-gen-go-grpc.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  local-ai:
    needs:
      - gorice
      - protoc-gen-go
      - protoc-gen-go-grpc
    runs-on: ${{ inputs.runs-on }}
    name: Build local-ai with aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get go.rice
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.gorice.outputs.artifact-name }}

      - name: Get protoc-gen-go
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.protoc-gen-go.outputs.artifact-name }}

      - name: Get protoc-gen-go-grpc
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.protoc-gen-go-grpc.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: ./packages/local-ai
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  web-ext:
    runs-on: ${{ inputs.runs-on }}
    name: Build web-ext for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/web-ext.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  firefox-extension-plasma-integration:
    needs:
      - web-ext
    runs-on: ${{ inputs.runs-on }}
    name: Build firefox-extension-plasma-integration which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get web-ext
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.web-ext.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/firefox-extension-plasma-integration.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  cubeb:
    runs-on: ${{ inputs.runs-on }}
    name: Build cubeb for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/cubeb.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  ctre:
    runs-on: ${{ inputs.runs-on }}
    name: Build ctre for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/ctre.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  qcm:
    needs:
      - cubeb
      - ctre
    runs-on: ${{ inputs.runs-on }}
    name: Build qcm which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get cubeb
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.cubeb.outputs.artifact-name }}

      - name: Get ctre
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.ctre.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/qcm.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  icoextract:
    runs-on: ${{ inputs.runs-on }}
    name: Build icoextract for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/icoextract.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  python-setuptools-reproducible:
    runs-on: ${{ inputs.runs-on }}
    name: Build python-setuptools-reproducible for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/python-setuptools-reproducible.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  patool:
    needs:
      - python-setuptools-reproducible
    runs-on: ${{ inputs.runs-on }}
    name: Build patool with aur depends for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get python-setuptools-reproducible
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.python-setuptools-reproducible.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/patool.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  python-fvs:
    runs-on: ${{ inputs.runs-on }}
    name: Build python-fvs for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/python-fvs.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  python-pathvalidate:
    runs-on: ${{ inputs.runs-on }}
    name: Build python-pathvalidate for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/python-pathvalidate.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  python-steamgriddb:
    runs-on: ${{ inputs.runs-on }}
    name: Build python-steamgriddb for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/python-steamgriddb.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  vkbasalt-cli:
    runs-on: ${{ inputs.runs-on }}
    name: Build vkbasalt-cli for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/vkbasalt-cli.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest

  bottles:
    needs:
      - icoextract
      - python-setuptools-reproducible
      - patool
      - python-fvs
      - python-pathvalidate
      - python-steamgriddb
      - vkbasalt-cli
    runs-on: ${{ inputs.runs-on }}
    name: Build bottles with aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get icoextract
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.icoextract.outputs.artifact-name }}

      - name: Get python-setuptools-reproducible
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.python-setuptools-reproducible.outputs.artifact-name }}

      - name: Get patool
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.patool.outputs.artifact-name }}

      - name: Get python-fvs
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.python-fvs.outputs.artifact-name }}

      - name: Get python-pathvalidate
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.python-pathvalidate.outputs.artifact-name }}

      - name: Get python-steamgriddb
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.python-steamgriddb.outputs.artifact-name }}

      - name: Get vkbasalt-cli
        uses: arenekosreal/download-artifact@v4
        with:
          name: ${{ needs.vkbasalt-cli.outputs.artifact-name }}

      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          mv -v pkgdest repo
          ls -l repo
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/bottles.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          path: pkgdest
  
  obs-packages:
    name: Get packages built on Open Build Service
    runs-on: ${{ inputs.runs-on }}
    # aarch64 is not supported on Open Build Service
    if: ${{ ! endsWith(inputs.runs-on, 'arm') }}
    strategy:
      matrix:
        package:
          - home:ZhangHua/ungoogled-chromium-xdg
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install python-yq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y yq

      - name: Get package
        id: download
        run: |
          PROJECT="$(echo '${{ matrix.package }}' | cut -d / -f 1)"
          PACKAGE="$(echo '${{ matrix.package }}' | cut -d / -f 2)"
          TARGET_ARCH="$(uname -m)"
          API="https://api.opensuse.org/published/$PROJECT/Arch/$TARGET_ARCH"
          CURL=(curl -L -u '${{ secrets.OBS_USERNAME }}:${{ secrets.OBS_PASSWORD }}')
          QUERY=".directory.entry[].\"@name\" | select(test(\"^$PACKAGE-.+-$TARGET_ARCH.pkg.tar.[0-9a-zA-Z]+$\"))"
          mkdir -p pkgdest
          echo "::debug::Using ${CURL[*]} to query $API with jq filter '$QUERY'..."
          EOF="$(dd if=/dev/urandom bs=15 count=1 status=none | base64)"
          echo "files<<$EOF" >> "$GITHUB_OUTPUT"
          while read -r file
          do
            url="$API/$file"
            echo "Downloading $file from $url..."
            "${CURL[@]}" "$url" -o "pkgdest/$file"
            echo "$file" >> "$GITHUB_OUTPUT"
          done < <("${CURL[@]}" -H "Accept: application/xml; charset=utf-8" "$API" | tee response.xml | xq-python -r "$QUERY")
          echo "$EOF" >> "$GITHUB_OUTPUT"
          echo -e "::debug::Response from server:\n$(cat response.xml)"
          pkgver_pkgrel="$(ls pkgdest | head -n 1 | sed "s/$PACKAGE-debug-//;s/$PACKAGE-//;s/.pkg.tar.[0-9a-zA-Z]+$//")"
          printf "artifact-name=%s %s-%d %s\n" \
            "$PACKAGE" \
            "$(echo "$pkgver_pkgrel" | cut -d- -f 1)" \
            "$(echo "$pkgver_pkgrel" | cut -d- -f 2)" \
            "$(uname -m)" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.download.outputs.artifact-name }}
          path: pkgdest

  github-packages:
    name: Get packages on GitHub
    runs-on: ${{ inputs.runs-on }}
    strategy:
      matrix:
        repo:
          - arenekosreal/firefox-xdg
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install gh-cli
        if: github.event.act.local
        run: |
          sudo mkdir -p -m 755 /etc/apt/keyrings
          curl https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
            sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
          sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
          sudo mkdir -p -m 755 /etc/apt/sources.list.d
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
            sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update -y
          sudo apt-get install -y gh
      
      - name: Download release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p pkgdest
          gh release download \
            --dir pkgdest \
            --repo '${{ matrix.repo }}' \
            --pattern "*-$(uname -m).pkg.tar.*"
          find pkgdest -maxdepth 1 -type f -name '*.pkg.tar.*.*' -delete

      - name: Generate meta info
        id: gen-meta-info
        run: |
          f="$(ls pkgdest | head -n 1)"
          name="$(basename '${{ matrix.repo }}')"          
          f="$(echo "$f" | sed "s/$name-debug-//")"
          f="$(echo "$f" | sed "s/$name-//")"
          f="$(echo "$f" | sed 's/.pkg.tar.*$//')"
          printf "artifact-name=%s %s-%d %s\n" \
            "$name" \
            "$(echo "$f" | cut -d- -f 1)" \
            "$(echo "$f" | cut -d- -f 2)" \
            "$(uname -m)" \
          >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: arenekosreal/upload-artifact@v4
        with:
          name: ${{ steps.gen-meta-info.outputs.artifact-name }}
          path: pkgdest

  release:
    name: Grab all artifacts and prepare release
    needs:
      - cinny
      - spotube
      - fooyin
      - osu-lazer-bin
      - spicetify-themes
      - watt-toolkit-git
      - waydroid
      - bfgminer-git
      - local-ai
      - firefox-extension-plasma-integration
      - qcm
      - bottles
      - obs-packages
      - github-packages
      - independent-packages
    permissions:
      contents: write
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: arenekosreal/download-artifact@v4
        with:
          merge-multiple: true

      - name: Move directory
        run: |
          ls -l
          mv -v pkgdest '${{ github.repository_owner }}'
      
      - name: Install pacman-package-manager
        run: |
          sudo apt-get update -y
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Import GPG private key
        id: import-gpg
        run: |
          GPG=(gpg --batch --yes --passphrase '${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}')
          "${GPG[@]}" --import <<< '${{ secrets.GPG_PRIVATE_KEY }}'
          {
            echo -n fingerprint=
            "${GPG[@]}" --show-key --with-colons <<< '${{ secrets.GPG_PRIVATE_KEY }}' | grep "^sec.*S" | cut -d : -f 5  
          } >> "$GITHUB_OUTPUT"

      - name: Exporting GPG public key
        id: export-gpg
        run: |
          EOF="$(dd if=/dev/urandom bs=15 count=1 status=none | base64)"
          {
            echo "public-key<<$EOF"
            gpg --batch --yes --passphrase '${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}' --export --armor
            echo "$EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Generate notes
        run: |
          {
            echo '`pacman.conf` example:'
            echo '```'
            echo '[${{ github.repository_owner }}]'
            echo 'Server = ${{ github.server_url }}/${{ github.repository }}/releases/download/os/$arch'
            echo '```'
            echo ''
            echo 'Public key to sign packages and repository:'
            echo '```'
            echo '${{ steps.export-gpg.outputs.public-key }}'
            echo '```'
            echo 'Please import it with `pacman-key` so those packages can be verified.'
          } > notes.md

      - name: Sign packages
        run: |
          find '${{ github.repository_owner }}' -maxdepth 1 -type f -name '*.pkg.tar.*' -exec gpg --batch --yes --passphrase '${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}' --pinentry-mode loopback --detach-sign --local-user '${{ steps.import-gpg.outputs.fingerprint }}' --output '{}.sig' '{}' \; 
        
      - name: Generate repository
        run: |
          find '${{ github.repository_owner }}' -maxdepth 1 -type f -name '*.pkg.tar.*' ! -name '*.pkg.tar.*.sig' -exec repo-add '${{ github.repository_owner }}/${{ github.repository_owner }}.db.tar.gz' {} +

      - name: Sign repository
        run: |
          GPG=(gpg --batch --yes --passphrase '${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}' --pinentry-mode loopback --detach-sign --local-user '${{ steps.import-gpg.outputs.fingerprint }}')
          "${GPG[@]}"  --output '${{ github.repository_owner }}/${{ github.repository_owner }}.db.tar.gz.sig' '${{ github.repository_owner }}/${{ github.repository_owner }}.db.tar.gz'
          "${GPG[@]}"  --output '${{ github.repository_owner }}/${{ github.repository_owner }}.files.tar.gz.sig' '${{ github.repository_owner }}/${{ github.repository_owner }}.files.tar.gz'
          ln -srfv '${{ github.repository_owner }}/${{ github.repository_owner }}.db.tar.gz' '${{ github.repository_owner }}/${{ github.repository_owner }}.db'
          ln -srfv '${{ github.repository_owner }}/${{ github.repository_owner }}.files.tar.gz' '${{ github.repository_owner }}/${{ github.repository_owner }}.files'
          ln -srfv '${{ github.repository_owner }}/${{ github.repository_owner }}.db.tar.gz.sig' '${{ github.repository_owner }}/${{ github.repository_owner }}.db.sig'
          ln -srfv '${{ github.repository_owner }}/${{ github.repository_owner }}.files.tar.gz.sig' '${{ github.repository_owner }}/${{ github.repository_owner }}.files.sig'

      - name: Show repository status
        run: |
          ls -l '${{ github.repository_owner }}'

      - name: Update release
        if: ${{ ! github.event.act.local }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tag="os/$(uname -m)"
          if gh release view "$tag" > /dev/null
          then
            echo "Removing existing release..."
            gh release delete "$tag" --cleanup-tag --yes
          fi
          echo "Creating new release..."
          gh release create "$tag" --notes-file notes.md --target '${{ github.sha }}' --title "Release for $tag" --draft
          echo "Uploading files..."
          # https://github.com/cli/cli/issues/9586
          for f in '${{ github.repository_owner }}'/*
          do
            gh release upload "$tag" "$f" --clobber
            sleep 1
          done
          gh release edit "$tag" --draft=false

      - name: Save to volume
        if: github.event.act.local
        run: |
          mkdir -p '/act/out/${{ github.repository_owner }}'"/os/$(uname -m)"
          cp -a --target-directory '/act/out/${{ github.repository_owner }}'"/os/$(uname -m)" \
            '${{ github.repository_owner }}'/*
