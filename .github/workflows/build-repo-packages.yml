name: Build packages in the repository

on:
  workflow_dispatch:
    inputs:
      runs-on:
        required: true
        type: choice
        options:
          - ubuntu-24.04
          - ubuntu-24.04-arm
        description: The runner to build packages
  
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
        description: The runner to build packages

jobs:
  independent-packages:
    strategy:
      matrix:
        pkgbuild-repo:
          - git+https://aur.archlinux.org/ares-decrypt.git
          - git+https://aur.archlinux.org/aria2cd.git
          - git+https://aur.archlinux.org/ariang-git.git
          - git+https://aur.archlinux.org/ariang-native-git.git
          - git+https://aur.archlinux.org/basedpyright.git
          - git+https://aur.archlinux.org/bcache-tools.git
          - git+https://aur.archlinux.org/binder_linux-dkms.git
          - git+https://aur.archlinux.org/btrfs-assistant.git
          - git+https://aur.archlinux.org/btrfsmaintenance.git
          - git+https://aur.archlinux.org/caddy-trojan.git
          - git+https://aur.archlinux.org/carapace.git
          - git+https://aur.archlinux.org/chromium-extension-plasma-integration.git
          - git+https://aur.archlinux.org/chromium-extension-web-store.git
          - git+https://aur.archlinux.org/cloudflarespeedtest.git
          - git+https://aur.archlinux.org/crow-translate.git
          - git+https://aur.archlinux.org/csharp-ls.git
          - git+https://aur.archlinux.org/dendrite.git
          - git+https://aur.archlinux.org/dockerfile-language-server.git
          - git+https://aur.archlinux.org/downgrade.git
          - git+https://aur.archlinux.org/fcitx5-pinyin-custom-pinyin-dictionary.git
          - git+https://aur.archlinux.org/fcitx5-pinyin-moegirl.git
          - git+https://aur.archlinux.org/ffmpeg-audio-thumbnailer.git
          - git+https://aur.archlinux.org/find-the-command.git
          - git+https://aur.archlinux.org/firefox-extension-adguard.git
          - git+https://aur.archlinux.org/firefox-extension-localcdn.git
          #- git+https://aur.archlinux.org/gpt4all-chat.git
          - git+https://aur.archlinux.org/hath-rust.git
          - git+https://aur.archlinux.org/hplip-plugin.git
          - git+https://aur.archlinux.org/icalingua++-git.git
          - git+https://aur.archlinux.org/icecream.git
          - git+https://aur.archlinux.org/icoextract.git
          - git+https://aur.archlinux.org/kde-thumbnailer-apk.git
          - git+https://aur.archlinux.org/ksmbd-tools.git
          - git+https://aur.archlinux.org/lyrica.git
          - git+https://aur.archlinux.org/mpv-memo-git.git
          - git+https://aur.archlinux.org/mpv-thumbfast-noenabled-git.git
          - git+https://aur.archlinux.org/mpv-uosc.git
          - git+https://aur.archlinux.org/naiveproxy.git
          - git+https://aur.archlinux.org/needrestart.git
          - git+https://aur.archlinux.org/netcoredbg.git
          - git+https://aur.archlinux.org/nodejs-jsonlint.git
          - git+https://aur.archlinux.org/ntfysh.git
          - git+https://aur.archlinux.org/obs-pipewire-audio-capture.git
          - git+https://aur.archlinux.org/oh-my-posh.git
          - git+https://aur.archlinux.org/openwrt-devel.git
          - git+https://aur.archlinux.org/osc.git
          - git+https://aur.archlinux.org/paccache-hook.git
          - git+https://aur.archlinux.org/paru.git
          - git+https://aur.archlinux.org/pay-respects.git
          - git+https://aur.archlinux.org/pipewire-module-xrdp.git
          - git+https://aur.archlinux.org/pipewire-module-xrdp-git.git
          - git+https://aur.archlinux.org/plasma-gamemode-git.git
          - git+https://aur.archlinux.org/plasma6-applets-caraoke-git.git
          - git+https://aur.archlinux.org/plasma6-wallpapers-wallpaper-engine-git.git
          - git+https://aur.archlinux.org/python-pyclip.git
          - git+https://aur.archlinux.org/rclone-aliyundrive-git.git
          - git+https://aur.archlinux.org/realitlscanner.git
          - git+https://aur.archlinux.org/ruffle-nightly.git
          - git+https://aur.archlinux.org/sing-box.git
          - git+https://aur.archlinux.org/sing-geoip.git
          - git+https://aur.archlinux.org/sing-geosite.git
          - git+https://aur.archlinux.org/spicetify-extensions-rxri-git.git
          - git+https://aur.archlinux.org/systemd-boot-pacman-hook.git
          - git+https://aur.archlinux.org/systemd-cron.git
          - git+https://aur.archlinux.org/tcp-brutal-dkms.git
          - git+https://aur.archlinux.org/unblockneteasemusic-golang-git.git
          - git+https://aur.archlinux.org/usbguard-notifier-git.git
          - git+https://aur.archlinux.org/watt-toolkit-bin.git
          - git+https://aur.archlinux.org/waylyrics.git
          - git+https://aur.archlinux.org/wine-wow64.git
          - git+https://aur.archlinux.org/xdg-ninja.git
          - git+https://aur.archlinux.org/spotify.git
          - git+https://aur.archlinux.org/linux-pf.git
          - git+https://aur.archlinux.org/ayugram-desktop.git
          - git+https://aur.archlinux.org/thrive.git
    runs-on: ${{ inputs.runs-on }}
    name: Build packages without any customization
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: ${{ matrix.pkgbuild-repo }}
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  cinny:
    runs-on: ${{ inputs.runs-on }}
    name: Build cinny with customized cinnyBase env
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/cinny.git
          env: |
            cinnyBase=/cinny
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  spotube:
    runs-on: ${{ inputs.runs-on }}
    name: Build spotube with customized env
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/spotube.git
          env: |
            MAKEPKG_SPOTUBE_SPOTIFY_SECRETS=${{ secrets.MAKEPKG_SPOTUBE_SPOTIFY_SECRETS }}
            MAKEPKG_SPOTUBE_LASTFM_API_KEY=${{ secrets.MAKEPKG_SPOTUBE_LASTFM_API_KEY }}
            MAKEPKG_SPOTUBE_LASTFM_API_SECRET=${{ secrets.MAKEPKG_SPOTUBE_LASTFM_API_SECRET }}
            PACKAGER=${{ vars.PACKAGER }}     

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  libvgm-git:
    runs-on: ${{ inputs.runs-on }}
    name: Build libvgm for packages depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libvgm-git.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  fooyin:
    needs:
      - libvgm-git
    runs-on: ${{ inputs.runs-on }}
    name: Build fooyin which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libvgm
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.libvgm-git.outputs.artifact-name }}
          directory: repo

      - name: Get libvgm
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/libvgm*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/fooyin.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  osu-mime:
    runs-on: ${{ inputs.runs-on }}
    name: Build osu-mime for packages depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build packages
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/osu-mime.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  osu-lazer-bin:
    needs:
      - osu-mime
    runs-on: ${{ inputs.runs-on }}
    name: Build osu-lazer-bin which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get osu-mime
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.osu-mime.outputs.artifact-name }}
          directory: repo

      - name: Get osu-mime
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/osu-mime*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/osu-lazer-bin.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  spicetify-cli:
    runs-on: ${{ inputs.runs-on }}
    name: Build spicetify-cli for packages depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/spicetify-cli.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  spicetify-themes:
    needs:
      - spicetify-cli
    strategy:
      matrix:
        pkgbuild-repo:
          - git+https://aur.archlinux.org/spicetify-theme-nord-git.git
          - git+https://aur.archlinux.org/spicetify-themes-git.git
    runs-on: ${{ inputs.runs-on }}
    name: Build spicetify themes
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get spicetify-cli
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.spicetify-cli.outputs.artifact-name }}
          directory: repo

      - name: Get spicetify-cli
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/spicetify-cli*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: ${{ matrix.pkgbuild-repo }}
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest
  
  dotnet-install:
    runs-on: ${{ inputs.runs-on }}
    name: Build dotnet-install for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/dotnet-install.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  watt-toolkit-git:
    needs:
      - dotnet-install
    runs-on: ${{ inputs.runs-on }}
    name: Build watt-toolkit-git which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get dotnet-install
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.dotnet-install.outputs.artifact-name }}
          directory: repo

      - name: Get dotnet-install
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/dotnet-install*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/watt-toolkit-git.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  libglibutil:
    runs-on: ${{ inputs.runs-on }}
    name: Build libglibutil for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libglibutil.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifacts
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  libgbinder:
    needs:
      - libglibutil
    runs-on: ${{ inputs.runs-on }}
    name: Build libgbinder which has aur depends for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libglibutil
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.libglibutil.outputs.artifact-name }}
          directory: repo

      - name: Get libglibutil
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/libglibutil*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libgbinder.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  python-gbinder:
    needs:
      - libglibutil
      - libgbinder
    runs-on: ${{ inputs.runs-on }}
    name: Build python-gbinder which has aur depends for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libglibutil
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.libglibutil.outputs.artifact-name }}
          directory: repo

      - name: Get libglibutil
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/libglibutil*.pkg.tar.* repo

      - name: Get libgbinder
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.libgbinder.outputs.artifact-name }}
          directory: repo

      - name: Get libgbinder
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgest/libgbinder*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/python-gbinder.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  waydroid:
    needs:
      - libglibutil
      - libgbinder
      - python-gbinder
    runs-on: ${{ inputs.runs-on }}
    name: Build waydroid which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libglibutil
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.libglibutil.outputs.artifact-name }}
          directory: repo

      - name: Get libglibutil
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/libglibutil*.pkg.tar.* repo

      - name: Get libgbinder
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.libgbinder.outputs.artifact-name }}
          directory: repo

      - name: Get libgbinder
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/libgbinder*.pkg.tar.* repo

      - name: Get python-gbinder
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.python-gbinder.outputs.artifact-name }}
          directory: repo

      - name: Get python-gbinder
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/python-gbinder*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/waydroid.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  libbase58:
    runs-on: ${{ inputs.runs-on }}
    name: Build libbase58 for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libbase58.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  libblkmaker:
    needs:
      - libbase58
    runs-on: ${{ inputs.runs-on }}
    name: Build libblkmaker which has aur depends for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libbase58
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.libbase58.outputs.artifact-name }}
          directory: repo

      - name: Get libbase58
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/libbase58*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/libblkmaker.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  bfgminer-git:
    needs:
      - libbase58
      - libblkmaker
    runs-on: ${{ inputs.runs-on }}
    name: Build bfgminer-git which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get libbase58
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.libbase58.outputs.artifact-name }}
          directory: repo

      - name: Get libbase58
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/libbase58*.pkg.tar.* repo

      - name: Get libblkmaker
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.libblkmaker.outputs.artifact-name }}
          directory: repo

      - name: Get libblkmaker
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/libblkmaker*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/bfgminer-git.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  gorice:
    runs-on: ${{ inputs.runs-on }}
    name: Build go.rice for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/go.rice.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  protoc-gen-go:
    runs-on: ${{ inputs.runs-on }}
    name: Build protoc-gen-go for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/protoc-gen-go.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  protoc-gen-go-grpc:
    needs:
      - protoc-gen-go
    runs-on: ${{ inputs.runs-on }}
    name: Build protoc-gen-go-grpc with aur depends for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get protoc-gen-go
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.protoc-gen-go.outputs.artifact-name }}
          directory: repo

      - name: Get protoc-gen-go
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/protoc-gen-go*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/protoc-gen-go-grpc.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  local-ai:
    needs:
      - gorice
      - protoc-gen-go
      - protoc-gen-go-grpc
    runs-on: ${{ inputs.runs-on }}
    name: Build local-ai with aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get go.rice
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.gorice.outputs.artifact-name }}
          directory: repo

      - name: Get go.rice
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/go.rice*.pkg.tar.* repo

      - name: Get protoc-gen-go
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.protoc-gen-go.outputs.artifact-name }}
          directory: repo

      - name: Get protoc-gen-go
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/protoc-gen-go*.pkg.tar.* repo

      - name: Get protoc-gen-go-grpc
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.protoc-gen-go-grpc.outputs.artifact-name }}
          directory: repo

      - name: Get protoc-gen-go-grpc
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/protoc-gen-go-grpc*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: ./packages/local-ai
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  web-ext:
    runs-on: ${{ inputs.runs-on }}
    name: Build web-ext for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/web-ext.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  firefox-extension-plasma-integration:
    needs:
      - web-ext
    runs-on: ${{ inputs.runs-on }}
    name: Build firefox-extension-plasma-integration which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get web-ext
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.web-ext.outputs.artifact-name }}
          directory: repo

      - name: Get web-ext
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/web-ext*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/firefox-extension-plasma-integration.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  cubeb:
    runs-on: ${{ inputs.runs-on }}
    name: Build cubeb for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/cubeb.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  ctre:
    runs-on: ${{ inputs.runs-on }}
    name: Build ctre for package depends on it
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/ctre.git
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  qcm:
    needs:
      - cubeb
      - ctre
    runs-on: ${{ inputs.runs-on }}
    name: Build qcm which has aur depends
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get cubeb
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.cubeb.outputs.artifact-name }}
          directory: repo

      - name: Get cubeb
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/cubeb*.pkg.tar.* repo

      - name: Get ctre
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/download-artifact
        with:
          name: ${{ needs.ctre.outputs.artifact-name }}
          directory: repo

      - name: Get ctre
        if: github.event.act.local
        run: |
          mkdir -p repo
          cp pkgdest/ctre*.pkg.tar.* repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Setup repository
        run: |
          find repo -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add repo/repo.db.tar.gz {} +

      - name: Build package
        id: build
        uses: ./.github/actions/build-pkgbuild
        with:
          where: git+https://aur.archlinux.org/qcm.git
          repo: repo
          env: |
            PACKAGER=${{ vars.PACKAGER }}

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.build.outputs.artifact-name }}
          directory: pkgdest

  obs-packages:
    name: Get packages built on Open Build Service
    runs-on: ${{ inputs.runs-on }}
    # aarch64 is not supported on Open Build Service
    if: ${{ ! endsWith(inputs.runs-on, 'arm') }}
    strategy:
      matrix:
        package:
          - home:ZhangHua/ungoogled-chromium-xdg
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse matrix
        id: parse-matrix
        run: |
          {
            echo -n "project="
            echo "${{ matrix.package }}" | cut -d / -f 1
            echo -n "package="
            echo "${{ matrix.package }}" | cut -d / -f 2
          } >> "$GITHUB_OUTPUT"

      - name: Get target arch
        id: get-target-arch
        uses: ./.github/actions/get-target-arch

      - name: Create download directory
        run: mkdir -p pkgdest

      - name: Get package
        uses: ./.github/actions/download-obs-binaries
        id: download
        with:
          username: ${{ secrets.OBS_USERNAME }}
          password: ${{ secrets.OBS_PASSWORD }}
          regex: ^${{ steps.parse-matrix.outputs.package }}.+\.pkg\.tar\.[0-9a-zA-Z]+$
          project: ${{ steps.parse-matrix.outputs.project }}
          repository: Arch
          download-directory: pkgdest
          architecture: ${{ steps.get-target-arch.outputs.target-arch }}

      - name: Generate meta info
        id: gen-meta-info
        run: |
          f="$(echo "${{ steps.download.outputs.files }}" | head -n 1)"
          f="$(echo "$f" | sed 's/${{ steps.parse-matrix.outputs.package }}-//' )"
          f="$(echo "$f" | sed 's/${{ steps.parse-matrix.outputs.package }}-debug-//')"
          f="$(echo "$f" | sed 's/.pkg.tar.*$//')"
          printf "artifact-name=%s %s-%d %s\n" \
            "${{ steps.parse-matrix.outputs.package }}" \
            "$(echo "$f" | cut -d- -f 1)" \
            "$(echo "$f" | cut -d- -f 2)" \
            "${{ steps.get-target-arch.outputs.target-arch }}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.gen-meta-info.outputs.artifact-name }}
          directory: pkgdest

  github-packages:
    name: Get packages on GitHub
    runs-on: ${{ inputs.runs-on }}
    strategy:
      matrix:
        repo:
          - arenekosreal/firefox-xdg
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get target arch
        id: get-target-arch
        uses: ./.github/actions/get-target-arch
      
      - name: Download release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p pkgdest
          gh release download \
            --dir pkgdest \
            --repo '${{ matrix.repo }}' \
            --pattern '*-${{ steps.get-target-arch.outputs.target-arch }}.pkg.tar.*'
          find pkgdest -maxdepth 1 -type f -name '*.pkg.tar.*.*' -delete

      - name: Generate meta info
        id: gen-meta-info
        run: |
          f="$(ls pkgdest | head -n 1)"
          name="$(basename '${{ matrix.repo }}')"          
          f="$(echo "$f" | sed "s/$name-debug-//")"
          f="$(echo "$f" | sed "s/$name-//")"
          f="$(echo "$f" | sed 's/.pkg.tar.*$//')"
          printf "artifact-name=%s %s-%d %s\n" \
            "$name" \
            "$(echo "$f" | cut -d- -f 1)" \
            "$(echo "$f" | cut -d- -f 2)" \
            '${{ steps.get-target-arch.outputs.target-arch }}' \
          >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        if: ${{ ! github.event.act.local }}
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ steps.gen-meta-info.outputs.artifact-name }}
          directory: pkgdest

  release:
    name: Grab all artifacts and prepare release
    needs:
      - cinny
      - spotube
      - fooyin
      - osu-lazer-bin
      - spicetify-themes
      - watt-toolkit-git
      - waydroid
      - bfgminer-git
      - local-ai
      - firefox-extension-plasma-integration
      - qcm
      - obs-packages
      - github-packages
      - independent-packages
    permissions:
      contents: write
    if: ${{ ! github.event.act.local }}
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4

      - name: Unpack artifact
        run: |
          mkdir -p '${{ github.repository_owner }}'
          find . -mindepth 2 -maxdepth 2 -type f -name 'repo.tar' -exec tar -x -p -C '${{ github.repository_owner }}' -k -f {} \;
          ls -l repo

      - name: Install pacman-package-manager
        run: |
          sudo apt-get install -y pacman-package-manager libarchive-tools

      - name: Import GPG private key
        id: import-gpg
        run: |
          GPG=(gpg --batch --yes --passphrase '${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}')
          "${GPG[@]}" --import <<< '${{ secrets.GPG_PRIVATE_KEY }}'
          {
            echo -n fingerprint=
            "${GPG[@]}" --show-key --with-colons <<< '${{ secrets.GPG_PRIVATE_KEY }}' | grep "^sec" | greo "S" | cut -d : -f 5  
          } >> "$GITHUB_OUTPUT"

      - name: Exporting GPG public key
        id: export-gpg
        run: |
          EOF="$(dd if=/dev/urandom bs=15 count=1 status=none | base64)"
          {
            echo "public-key<<$EOF"
            gpg --batch --yes --passphrase '${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}' --export --armor
            echo "$EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Generate notes
        run: |
          {
            echo '`pacman.conf` example:'
            echo '```'
            echo '[${{ github.repository_owner }}]'
            echo 'Server = ${{ github.server_url }}/${{ github.repository/releses/download/os/$arch }}'
            echo '```'
            echo ''
            echo 'Public key to sign packages and repository:'
            echo '```'
            echo '${{ steps.export-gpg.outputs.public-key }}'
            echo '```'
            echo 'Please import it with `pacman-key` so those packages can be verified.'
          } > notes.md

      - name: Sign packages
        run: |
          find '${{ github.repository_owner }}' -maxdepth 1 -type f -name '*.pkg.tar.*' -exec gpg --batch --yes --passphrase '${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}' --pinentry-mode loopback --detach-sign --local-user '${{ steps.import-gpg.outputs.fingerprint }}' --output '{}.sig' '{}' \; 
        
      - name: Generate repository
        run: |
          find '${{ github.repository_owner }}' -maxdepth 1 -type f -name '*.pkg.tar.*' -exec repo-add '${{ github.repository_owner }}/${{ github.repository_owner }}.db.tar.gz' {} +

      - name: Sign database
        run: |
          gpg --batch --yes --passphrase '${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}' --pinentry-mode loopback --detach-sign --local-user '${{ steps.import-gpg.outputs.fingerprint }}' --output '${{ github.repository_owner }}/${{ github.repository_owner }}.db.tar.gz.sig' '${{ github.repository_owner }}/${{ github.repository_owner }}.db.tar.gz'
          gpg --batch --yes --passphrase '${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}' --pinentry-mode loopback --detach-sign --local-user '${{ steps.import-gpg.outputs.fingerprint }}' --output '${{ github.repository_owner }}/${{ github.repository_owner }}.files.tar.gz.sig' '${{ github.repository_owner }}/${{ github.repository_owner }}.files.tar.gz'
          ln -srfv '${{ github.repository_owner }}.db.tar.gz' '${{ github.repository_owner }}/${{ github.repository_owner }}.db'
          ln -srfv '${{ github.repository_owner }}.files.tar.gz' '${{ github.repository_owner }}/${{ github.repository_owner }}.files'

      - name: Show repository status
        run: |
          ls -l '${{ github.repository_owner }}'

      - name: Get target arch
        id: target-arch
        uses: ./.github/actions/get-target-arch

      - name: Update release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          tag='os/${{ steps.target-arch.outputs.target-arch }}'
          if gh release view "$tag" > /dev/null
          then
            echo "Removing existing release..."
            gh release delete "$tag" --clenup-tag --yes
          fi
          echo "Creating new release..."
          gh release create "$tag" \
            --notes-file notes.md \
            --target '${{ github.sha }}' \
            --title "Release for $tag"
          echo "Uploading files..."
          gh release upload "$tag" '${{ github.repository_owner }}/*' --clobber
          gh release edit "$tag" --draft=false
