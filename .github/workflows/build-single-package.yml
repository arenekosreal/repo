name: Build single package

on:
  workflow_call:
    inputs:
      git-repository:
        required: true
        type: string
        description: The url of git repository

      bump-pkgrel:
        required: false
        type: boolean
        default: false
        description: If bump pkgrel by adding 1 to existing

      args:
        required: false
        type: string
        default: ''
        description: Extra arguments to makepkg

      env:
        required: false
        type: string
        default: ''
        description: The KEY=VALUE lines to be used as environment variables

    secrets:
      secrets-env:
        required: false
        description: inputs.env but allow secrets being passed.

    outputs:
      artifact-name:
        description: The artifact name after built
        value: ${{ jobs.build-single-package.outputs.artifact-name }}

jobs:
  build-single-package:
    name: Build ${{ inputs.git-repository }}
    strategy:
      matrix:
        os:
          - ubuntu-24.04
    runs-on: ${{ matrix.os }}
    outputs:
      artifact-name: ${{ steps.gen-meta-info.outputs.artifact-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout PKGBUILD
        run: git clone ${{ inputs.git-repository }} startdir

      - name: Get pkgbase
        id: pkgbase
        uses: arenekosreal/pkgbuild-actions/get-global-variable@v0.2.6
        with:
          directory: startdir
          name: pkgbase

      - name: Apply patch
        run: |
          if [[ -d "patches/${{ steps.pkgbase.outputs.value }}" ]]
          then
            find "patches/${{ steps.pkgbase.outputs.value }}" \
              -maxdepth 1 -mindepth 1 -type f \
              -name '*.patch' -o -name '*.diff' | while read -r p
            do
              echo "Applying patch $p..."
              patch -Np1 -d startdir -i "../$p"
            done
          fi

      - name: Get arch
        id: arch
        uses: arenekosreal/pkgbuild-actions/get-global-variable@v0.2.6
        with:
          directory: startdir
          name: arch

      - name: Get target arch
        id: get-target-arch
        uses: ./.github/actions/get-target-arch

      - name: Analyze PKGBUILD
        id: analyze
        run: |
          case "${{ steps.pkgbase.outputs.value }}" in
            spotify)
              {
                echo "bump-pkgver=false"
                echo "download-manually=true"
                echo "needs-more-space=false"
              } >> "$GITHUB_OUTPUT"
              is_binary=true
              ;;
            ayugram-desktop|linux-pf)
              {
                echo "bump-pkgver=false"
                echo "download-manually=false"
                echo "needs-more-space=true"
              } >> "$GITHUB_OUTPUT"
              is_binary=false
              ;;
            *-git)
              {
                echo "bump-pkgver=true"
                echo "download-manually=false"
                echo "needs-more-space=false"
              } >> "$GITHUB_OUTPUT"
              is_binary=false
              ;;
            *-bin)
              {
                echo "bump-pkgver=false"
                echo "download-manually=false"
                echo "needs-more-space=false"
              } >> "$GITHUB_OUTPUT"
              is_binary=true
              ;;
            *)
              {
                echo "bump-pkgver=false"
                echo "download-manually=false"
                echo "needs-more-space=false"
              } >> "$GITHUB_OUTPUT"
              is_binary=false
              ;;
          esac

          read -r -a archs <<< "${{ steps.arch.outputs.value }}"
          found=false
          for arch_ in "${archs[@]}"
          do
            if [[ "$arch_" == "any" ]] || [[ "$arch_" == "${{ steps.get-target-arch.outputs.target-arch }}" ]]
            then
              echo "ignore-arch=" >> "$GITHUB_OUTPUT"
              found=true
              break
            fi
          done
          if ! "$found"
          then
            if "$is_binary"
            then
              echo "::error::${{ steps.pkgbase.outputs.value }} cannot be built with --ignorearch."
              exit 1
            else
              echo "::warning::${{ steps.get-target-arch.outputs.target-arch }} is not supported in PKGBUILD, adding --ignorearch to force build..."
              echo "ignore-arch=--ignorearch" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Create empty dependencies repository
        run: mkdir -p repo

      - name: Download packages to fill repository
        uses: ./.github/actions/download-packages-artifacts
        with:
          directory: repo

      - name: Generate dependencies repository
        uses: arenekosreal/pkgbuild-actions/update-pacman-repo@v0.2.6
        with:
          directory: repo

      - name: Get unmodified pkgrel
        id: original-pkgrel
        uses: arenekosreal/pkgbuild-actions/get-global-variable@v0.2.6
        with:
          directory: startdir
          name: pkgrel

      - name: Fetch GnuPG keys
        uses: arenekosreal/pkgbuild-actions/fetch-pgp-keys@v0.2.6
        with:
          directory: startdir

      - name: Download sources manually
        if: steps.gen-meta-info.outputs.download-manually == 'true'
        uses: arenekosreal/pkgbuild-actions/download-sources@v0.2.6
        with:
          directory: startdir

      - name: Bump pkgver
        if: steps.analyze.outputs.bump-pkgver == 'true'
        uses: arenekosreal/pkgbuild-actions/bump-pkgver@v0.2.6
        with:
          directory: startdir
          env: |
            PACKAGER='${{ vars.PACKAGER }}'
            ${{ inputs.env }}
            ${{ secrets.secrets-env }}
          repo: repo
          args: ${{ inputs.args }}

      - name: Bump pkgrel
        if: inputs.bump-pkgrel
        run:
          pkgrel="${{ steps.original-pkgrel.outputs.value }}"
          sed -i "s/^pkgrel=.*/pkgrel=$((pkgrel + 1))/" \
            startdir/PKGBUILD

      - name: Get pkgver
        id: pkgver
        uses: arenekosreal/pkgbuild-actions/get-global-variable@v0.2.6
        with:
          directory: startdir
          name: pkgver

      - name: Get pkgrel
        id: pkgrel
        uses: arenekosreal/pkgbuild-actions/get-global-variable@v0.2.6
        with:
          directory: startdir
          name: pkgrel

      - name: Free space
        if: steps.gen-meta-info.outputs.needs-more-space == 'true'
        uses: jlumbroso/free-disk-space@v1.3.1

      - name: Build the package
        uses: arenekosreal/pkgbuild-actions/build@v0.2.6
        with:
          directory: startdir
          env: |
            PACKAGER=${{ vars.PACKAGER }}
            ${{ inputs.env }}
          repo: repo
          args: ${{ steps.gen-meta-info.outputs.ignore-arch }} ${{ inputs.args }}

      - name: Generate meta info
        id: gen-meta-info
        run: |
          printf "artifact-name=%s %s-%d %s\n" \
            "${{ steps.pkgbase.outputs.value }}" \
            "${{ steps.pkgver.outputs.value }}" \
            "${{ steps.pkgrel.outputs.value }}" \
            "${{ steps.get-target-arch.outputs.target-arch }}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: ./.github/actions/upload-packages-artifacts
        with:
          directory: pkgdest
          name: ${{ steps.gen-meta-info.outputs.artifact-name }}
