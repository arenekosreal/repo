name: Prepare environment
description: Prepare environment for building PKGBUILDs
inputs:
  repo:
    description: The git repository contains PKGBUILD
    required: true
  validpgpkeys:
    description: Where to storage exported GnuPG key
    required: false
    default: gpg-key.asc
outputs:
  artifact-name:
    description: The string which can be used as artifact name
    value: ${{ steps.gen-output.outputs.artifact-name }}

runs:
  using: composite
  steps:
    - name: Generate output
      id: gen-output
      run: |
        echo -n artifact-name= >> "$GITHUB_OUTPUT"
        repo="${{ inputs.repo }}"
        echo "${repo##*/}" | sed 's/.git$//' >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Prepare directories
      run: |
        rm -rf startdir pkgdest repo
        mkdir -p startdir pkgdest repo
      shell: bash
      
    - name: Download pkgbuild
      run: git clone ${{ inputs.repo }} startdir
      shell: bash

    - name: Apply patch
      run: |
        if [[ -d "patches/${{ steps.gen-output.outputs.artifact-name }}" ]]
        then
          find "patches/${{ steps.gen-output.outputs.artifact-name }}" \
            -maxdepth 1 -mindepth 1 -type f \
            -name '*.patch' -o -name '*.diff' | while read -r p
          do
            echo "Applying $p..."
            patch -Np1 -d startdir -i "../$p"
          done
        fi
      shell: bash

    - name: Download spotify sources manually
      if: inputs.repo == 'https://aur.archlinux.org/spotify.git'
      uses: ./.github/actions/download-sources-in-pkgbuild
      with:
        directory: startdir

    - name: Download dependencies
      uses: actions/download-artifact@v4
      with:
        path: repo
        merge-multiple: true

    - name: Restore encoded filename
      uses: ./.github/actions/restore-package-name
      with:
        path: repo

    - name: Remove invalid package files
      run: |
        find repo -maxdepth 1 -mindepth 1 -type f -name '*.pkg.tar.*' | grep -E '.+\.pkg\.tar\.[^\.]+\..+' | while read -r f
        do
          echo "Removing $f..."
          rm "$f"
        done
      shell: bash

    - name: Generate pacman repository for building with dependency
      uses: ./.github/actions/update-pacman-repo
      with:
        repo: repo/repo.db.tar.gz

    - name: Scan GnuPG keys in PKGBUILD
      id: gpg-key
      uses: ./.github/actions/scan-gpg-keys
      with:
        directory: startdir

    - name: Obtain GnuPG keys
      if: steps.gpg-key.outputs.validpgpkeys
      run: |
        gpg --recv-keys ${{ steps.gpg-key.outputs.validpgpkeys }}
        if ! gpg --list-keys ${{ steps.gpg-key.outputs.validpgpkeys }}
        then 
          gpg --keyserver keyserver.ubuntu.com --recv-keys ${{ steps.gpg-key.outputs.validpgpkeys }}
          gpg --list-keys ${{ steps.gpg-key.outputs.validpgpkeys }}
        fi
      shell: bash

    - name: Export GnuPG keys
      if: steps.gpg-key.outputs.validpgpkeys
      run: gpg --export --armor -o ${{ inputs.validpgpkeys }} ${{ steps.gpg-key.outputs.validpgpkeys }}
      shell: bash
