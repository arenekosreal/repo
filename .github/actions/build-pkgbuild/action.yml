name: Prepare PKGBUILD
description: Prepare PKGBUILD for building
inputs:
  where:
    description: Where to get PKGBUILD
    required: true
  env:
    description: The KEY=VALUE lines exported when building
    required: false
  repo:
    description: The path to the repository contains dependencies not in official repositories
    required: false
outputs:
  artifact-name:
    description: The artifact name storage built package(s)
    value: ${{ steps.meta.outputs.artifact-name }}
runs:
  using: composite
  steps:
    - name: Obtain PKGBUILD
      shell: bash
      run: |
        where='${{ inputs.where }}'
        case "$where" in
          git+*)
            echo "Cloning repository with git..."
            git clone "${where#git+}" startdir
            ;;
          *)
            if [[ -d "$where" ]]
            then
              echo "Copying from local path..."
              cp -r "$where" startdir
            else
              echo "::error::Unsupported way to obtain PKGBUILD."
              exit 1
            fi
            ;;
        esac

    - name: Gen .SRCINFO
      uses: arenekosreal/makepkg-action@v0.2.3
      with:
        builddir: startdir
        args: --printsrcinfo
        stdout: startdir/.SRCINFO

    - name: Get pkgbase in generated .SRCINFO
      id: original-pkgbase
      uses: ./.github/actions/get-srcinfo-value
      with:
        srcinfo: startdir/.SRCINFO
        key: pkgbase

    - name: Apply patch
      shell: bash
      run: |
        pkgbase='${{ steps.original-pkgbase.outputs.value }}'
        if [[ -d "patches/$pkgbase" ]]
        then
          find "patches/$pkgbase" -maxdepth 1 -type f -name '*.patch' -o -name '*.diff' | \
          while read -r p
          do
            echo "Applying patch $p..."
            patch -Np1 -d startdir -i "../$p"
          done
        fi

    - name: Update .SRCINFO
      uses: arenekosreal/makepkg-action@v0.2.3
      with:
        builddir: startdir
        args: --printsrcinfo
        stdout: startdir/.SRCINFO

    - name: Get GPG fingerprints
      id: gpg-fingerprints
      uses: ./.github/actions/get-srcinfo-value
      with:
        srcinfo: startdir/.SRCINFO
        key: validpgpkeys

    - name: Fetch GPG fingerprints
      if: steps.gpg-fingerprints.outputs.value
      shell: bash
      run: |
        echo "GPG version:"
        gpg --version
        GPG=(gpg --batch --yes)
        KEYS_PGP="startdir/keys/pgp"
        mkdir -p "$KEYS_PGP"
        while read -r fingerprint
        do
          echo "Fetching $fingerprint..."
          FINGERPRINT_ASC="$KEYS_PGP/fingerprint.asc"
          if "${GPG[@]}" --recv-keys --keyserver keyserver.ubuntu.com "$fingerprint" && \
             "${GPG[@]}" --list-keys "$fingerprint"
          then
            echo "Fetch $fingerprint from keyserver.ubuntu.com successfully."
          elif "${GPG[@]}" --recv-keys --keyserver keys.openpgp.org "$fingerprint" && \
               "${GPG[@]}" --list-keys "$fingerprint"
          then
            echo "Fetch $fingerprint from keys.openpgp.org successfully."
          else
            echo "::error::Failed to fetch $fingerprint."
            exit 1
          fi
          echo "Exporting public key..."
          "${GPG[@]}" --export --armor -o "$FINGERPRINT_ASC" "$fingerprint"
        done <<< '${{ steps.gpg-fingerprints.outputs.value }}'

    - name: Get pkgbase
      id: pkgbase
      uses: ./.github/actions/get-srcinfo-value
      with:
        srcinfo: startdir/.SRCINFO
        key: pkgbase
      
    - name: Get sources required downloading
      id: sources
      if: contains('["spotify"]', steps.pkgbase.outputs.value)
      uses: ./.github/actions/get-srcinfo-value
      with:
        srcinfo: startdir/.SRCINFO
        key: source

    - name: Download sources
      if: steps.sources.outputs.value
      shell: bash
      run: |
        mkdir -p srcdest
        # Permission maybe broen after docker action
        sudo chown -R "$(id -u):$(id -g)" srcdest
        while read -r source
        do
          case "$source" in
            *::http://*|*::https://*|*::ftp://*)
              read -r -a array <<< "${source//::/ }"
              name="${array[0]}"
              url=${array[1]}
              unset array
              ;;
            http://*|https://*|ftp://*)
              name="$(basename "$source")"
              url="$source"
              ;;
            *)
              echo "::warning::Unsupported source $source, skipping..."
              ;;
          esac
          if [[ -n "$name" ]] && [[ -n "$url" ]]
          then
            echo "Downloading $url to srcdest/$name..."
            wget --tries 0 --retry-connrefused --retry-on-host-error -O "srcdest/$name" "$url"
          fi
        done <<< '${{ steps.sources.outputs.value }}'

    - name: Bump pkgver
      if: endsWith(steps.pkgbase.outputs.value, '-git')
      uses: arenekosreal/makepkg-action@v0.2.3
      with:
        builddir: startdir
        env: ${{ inputs.env }}
        args: --nobuild
        updatepkgbuild: true
        repo: ${{ inputs.repo }}

    - name: Generate final .SRCINFO
      uses: arenekosreal/makepkg-action@v0.2.3
      with:
        builddir: startdir
        args: --printsrcinfo
        stdout: startdir/.SRCINFO

    - name: Get updated pkgver
      id: pkgver
      uses: ./.github/actions/get-srcinfo-value
      with:
        srcinfo: startdir/.SRCINFO
        key: pkgver

    - name: Get updated pkgrel
      id: pkgrel
      uses: ./.github/actions/get-srcinfo-value
      with:
        srcinfo: startdir/.SRCINFO
        key: pkgrel

    - name: Get target architecture
      id: target-arch
      uses: ./.github/actions/get-target-arch

    - name: Generate meta info
      id: meta
      shell: bash
      run: |
        printf "artifact-name=%s %s-%d %s\n" \
          '${{ steps.pkgbase.outputs.value }}' \
          '${{ steps.pkgver.outputs.value }}' \
          '${{ steps.pkgrel.outputs.value }}' \
          '${{ steps.target-arch.outputs.target-arch }}' \
        >> "$GITHUB_OUTPUT"

    - name: Try using packages built before
      id: cache
      uses: actions/cache@v4
      with:
        path: pkgdest
        key: ${{ steps.meta.outputs.artifact-name }}

    - name: Free space
      if: contains(fromJSON('["linux-pf", "ayugram-desktop"]'), steps.pkgbase.outputs.value) && ( steps.cache.outputs.cache-hit != 'true' )
      uses: jlumbroso/free-disk-space@v1.3.1
      with:
        docker-images: false
        swap-storage: false

    - name: Get arch
      id: arch
      uses: ./.github/actions/get-srcinfo-value
      with:
        srcinfo: startdir/.SRCINFO
        key: arch

    - name: Filter compatible arch
      id: compatible-arch
      shell: bash
      run: |
        read -r -a archs <<< '${{ steps.arch.outputs.value }}'
        TARGET_ARCH='${{ steps.target-arch.outputs.target-arch }}'
        for arch in "${archs[@]}"
        do
          case "$arch" in
            any)
              echo arch=any >> "$GITHUB_OUTPUT"
              exit
              ;;
            $TARGET_ARCH)
              echo "arch=$TARGET_ARCH" >> "$GITHUB_OUTPUT"
              exit
              ;;
          esac  
        done
        echo arch= >> "$GITHUB_OUTPUT"

    - name: Check if requires --ignorearch
      id: needs-ignorearch
      if: ${{ ! steps.compatible-arch.outputs.arch }}
      shell: bash
      run: |
        case '${{ steps.pkgbase.outputs.value }}' in
          spotify|*-bin)
            echo "::error::Unable to build binary package with --ignorearch"
            exit 1
            ;;
          *)
            echo "::warning:Current architecture is not supported by PKGBUILD, force building..."
            echo result=--ignorerch >> "$GITHUB_OUTPUT"
            ;;
        esac

    - name: Build package
      if: steps.cache.outputs.cache-hit != 'true'
      uses: arenekosreal/makepkg-action@v0.2.3
      with:
        builddir: startdir
        env: ${{ inputs.env }}
        args: ${{ steps.needs-ignore-arch.outputs.result }}
        repo: ${{ inputs.repo }}

    - name: Fix permission
      # https://github.com/actions/runner/issues/1282
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        sudo chown -R "$(id -u):$(id -g)" pkgdest
